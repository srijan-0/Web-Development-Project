{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ACER\\\\Downloads\\\\New folder (2)\\\\MERN_Stack_Project_Ecommerce_Hayroo\\\\client\\\\src\\\\components\\\\shop\\\\notice\\\\notice.js\",\n  _s = $RefreshSig$();\n// import React, { useEffect, useState } from \"react\";\n// import Layout from \"../layout\"; // Import Layout component\n// import { getAllNotices } from \"./FetchApi\"; // Import your API function\n\n// export const Noticeshop = () => {\n//     const [notices, setNotices] = useState([]); // State to hold notices\n//     const [loading, setLoading] = useState(true); // Loading state\n\n//     // Fetch notices when the component mounts\n//     useEffect(() => {\n//         const fetchNotices = async () => {\n//             try {\n//                 let response = await getAllNotices();\n//                 console.log(\"API Response:\", response); // Log the full response\n//                 if (response.notices) { // Check if the notices array exists\n//                     setNotices(response.notices); // Store the fetched notices\n//                 } else {\n//                     console.log(\"No notices found in the response.\");\n//                 }\n//             } catch (error) {\n//                 console.error(\"Error fetching notices:\", error);\n//             } finally {\n//                 setLoading(false); // Stop loading after fetching\n//             }\n//         };\n\n//         fetchNotices();\n//     }, []); // Empty dependency array ensures it runs once when the component is mounted\n\n//     // Loading state display\n//     if (loading) {\n//         return <div>Loading...</div>;\n//     }\n\n//     return (\n//         <Layout>\n//             <div>\n//                 <h1>All Notices</h1>\n//                 <div>\n//                     {notices.length > 0 ? (\n//                         notices.map((notice) => (\n//                             <div key={notice.nId} className=\"notice-card\">\n//                                 <h2>{notice.title}</h2>\n//                                 <p>{notice.description}</p>\n//                                 <p>{notice.time}</p>\n//                             </div>\n//                         ))\n//                     ) : (\n//                         <p>No notices available.</p>\n//                     )}\n//                 </div>\n//             </div>\n//         </Layout>\n//     );\n// };\n\nimport React, { useEffect, useState } from \"react\";\nimport Layout from \"../layout\"; // Import Layout component\nimport { getAllNotices } from \"./FetchApi\"; // Import API function\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const Noticeshop = () => {\n  _s();\n  const [notices, setNotices] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [readNotices, setReadNotices] = useState(new Set()); // Track read notices\n\n  useEffect(() => {\n    const fetchNotices = async () => {\n      try {\n        let response = await getAllNotices();\n        if (response.notices) {\n          setNotices(response.notices);\n        }\n      } catch (error) {\n        console.error(\"Error fetching notices:\", error);\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchNotices();\n  }, []);\n\n  // Function to format the time\n  const formatTime = time => {\n    if (!time) return \"Unknown Time\";\n    const date = new Date(time);\n    return date.toLocaleString(\"en-US\", {\n      year: \"numeric\",\n      month: \"long\",\n      day: \"numeric\",\n      hour: \"2-digit\",\n      minute: \"2-digit\",\n      second: \"2-digit\",\n      hour12: true\n    });\n  };\n\n  // Function to mark notice as read\n  const markAsRead = nId => {\n    setReadNotices(prevReadNotices => new Set(prevReadNotices).add(nId));\n  };\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"text-center text-gray-600 mt-5\",\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 16\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(Layout, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"max-w-6xl mx-auto p-4 mt-10\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"text-2xl font-bold mb-6 text-center\",\n        children: \"All Notices\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 gap-6\",\n        children: notices.length > 0 ? notices.map(notice => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"bg-white shadow-md rounded-lg p-4 border border-gray-200\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"flex justify-between items-center\",\n            children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n              className: \"text-lg font-semibold\",\n              children: notice.title\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 122,\n              columnNumber: 37\n            }, this), !readNotices.has(notice.nId) &&\n            /*#__PURE__*/\n            // Show \"New\" badge only if not read\n            _jsxDEV(\"span\", {\n              className: \"bg-red-500 text-white text-xs px-2 py-1 rounded-full\",\n              children: \"New\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 124,\n              columnNumber: 41\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 121,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"text-sm text-gray-500 mt-2\",\n            children: [notice.author, \" \\u2022 \", formatTime(notice.time)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 131,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"text-gray-700 mt-2\",\n            children: notice.description\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 136,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"flex justify-between items-center mt-4\",\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"bg-gray-800 text-white px-3 py-1 rounded hover:bg-gray-700\",\n              onClick: () => markAsRead(notice.nId),\n              children: \"Mark as Read\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 140,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"bg-blue-600 text-white px-3 py-1 rounded hover:bg-blue-500\",\n              children: \"Read More\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 146,\n              columnNumber: 37\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 139,\n            columnNumber: 33\n          }, this)]\n        }, notice.nId, true, {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 29\n        }, this)) : /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"text-gray-500 col-span-3 text-center\",\n          children: \"No notices available.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 153,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 108,\n    columnNumber: 9\n  }, this);\n};\n_s(Noticeshop, \"GXmEN4/09jYmiflXC/+qPaAEVRs=\");\n_c = Noticeshop;\nvar _c;\n$RefreshReg$(_c, \"Noticeshop\");","map":{"version":3,"names":["React","useEffect","useState","Layout","getAllNotices","jsxDEV","_jsxDEV","Noticeshop","_s","notices","setNotices","loading","setLoading","readNotices","setReadNotices","Set","fetchNotices","response","error","console","formatTime","time","date","Date","toLocaleString","year","month","day","hour","minute","second","hour12","markAsRead","nId","prevReadNotices","add","className","children","fileName","_jsxFileName","lineNumber","columnNumber","length","map","notice","title","has","author","description","onClick","_c","$RefreshReg$"],"sources":["C:/Users/ACER/Downloads/New folder (2)/MERN_Stack_Project_Ecommerce_Hayroo/client/src/components/shop/notice/notice.js"],"sourcesContent":["// import React, { useEffect, useState } from \"react\";\r\n// import Layout from \"../layout\"; // Import Layout component\r\n// import { getAllNotices } from \"./FetchApi\"; // Import your API function\r\n\r\n// export const Noticeshop = () => {\r\n//     const [notices, setNotices] = useState([]); // State to hold notices\r\n//     const [loading, setLoading] = useState(true); // Loading state\r\n\r\n//     // Fetch notices when the component mounts\r\n//     useEffect(() => {\r\n//         const fetchNotices = async () => {\r\n//             try {\r\n//                 let response = await getAllNotices();\r\n//                 console.log(\"API Response:\", response); // Log the full response\r\n//                 if (response.notices) { // Check if the notices array exists\r\n//                     setNotices(response.notices); // Store the fetched notices\r\n//                 } else {\r\n//                     console.log(\"No notices found in the response.\");\r\n//                 }\r\n//             } catch (error) {\r\n//                 console.error(\"Error fetching notices:\", error);\r\n//             } finally {\r\n//                 setLoading(false); // Stop loading after fetching\r\n//             }\r\n//         };\r\n\r\n//         fetchNotices();\r\n//     }, []); // Empty dependency array ensures it runs once when the component is mounted\r\n\r\n//     // Loading state display\r\n//     if (loading) {\r\n//         return <div>Loading...</div>;\r\n//     }\r\n\r\n//     return (\r\n//         <Layout>\r\n//             <div>\r\n//                 <h1>All Notices</h1>\r\n//                 <div>\r\n//                     {notices.length > 0 ? (\r\n//                         notices.map((notice) => (\r\n//                             <div key={notice.nId} className=\"notice-card\">\r\n//                                 <h2>{notice.title}</h2>\r\n//                                 <p>{notice.description}</p>\r\n//                                 <p>{notice.time}</p>\r\n//                             </div>\r\n//                         ))\r\n//                     ) : (\r\n//                         <p>No notices available.</p>\r\n//                     )}\r\n//                 </div>\r\n//             </div>\r\n//         </Layout>\r\n//     );\r\n// };\r\n\r\nimport React, { useEffect, useState } from \"react\";\r\nimport Layout from \"../layout\"; // Import Layout component\r\nimport { getAllNotices } from \"./FetchApi\"; // Import API function\r\n\r\nexport const Noticeshop = () => {\r\n    const [notices, setNotices] = useState([]);\r\n    const [loading, setLoading] = useState(true);\r\n    const [readNotices, setReadNotices] = useState(new Set()); // Track read notices\r\n\r\n    useEffect(() => {\r\n        const fetchNotices = async () => {\r\n            try {\r\n                let response = await getAllNotices();\r\n                if (response.notices) {\r\n                    setNotices(response.notices);\r\n                }\r\n            } catch (error) {\r\n                console.error(\"Error fetching notices:\", error);\r\n            } finally {\r\n                setLoading(false);\r\n            }\r\n        };\r\n\r\n        fetchNotices();\r\n    }, []);\r\n\r\n    // Function to format the time\r\n    const formatTime = (time) => {\r\n        if (!time) return \"Unknown Time\";\r\n        const date = new Date(time);\r\n        return date.toLocaleString(\"en-US\", {\r\n            year: \"numeric\",\r\n            month: \"long\",\r\n            day: \"numeric\",\r\n            hour: \"2-digit\",\r\n            minute: \"2-digit\",\r\n            second: \"2-digit\",\r\n            hour12: true,\r\n        });\r\n    };\r\n\r\n    // Function to mark notice as read\r\n    const markAsRead = (nId) => {\r\n        setReadNotices((prevReadNotices) => new Set(prevReadNotices).add(nId));\r\n    };\r\n\r\n    if (loading) {\r\n        return <div className=\"text-center text-gray-600 mt-5\">Loading...</div>;\r\n    }\r\n\r\n    return (\r\n        <Layout>\r\n            <div className=\"max-w-6xl mx-auto p-4 mt-10\">\r\n                <h1 className=\"text-2xl font-bold mb-6 text-center\">All Notices</h1>\r\n\r\n                {/* Grid Layout - 3 notices per row */}\r\n                <div className=\"grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 gap-6\">\r\n                    {notices.length > 0 ? (\r\n                        notices.map((notice) => (\r\n                            <div\r\n                                key={notice.nId}\r\n                                className=\"bg-white shadow-md rounded-lg p-4 border border-gray-200\"\r\n                            >\r\n                                {/* Notice Header */}\r\n                                <div className=\"flex justify-between items-center\">\r\n                                    <h2 className=\"text-lg font-semibold\">{notice.title}</h2>\r\n                                    {!readNotices.has(notice.nId) && ( // Show \"New\" badge only if not read\r\n                                        <span className=\"bg-red-500 text-white text-xs px-2 py-1 rounded-full\">\r\n                                            New\r\n                                        </span>\r\n                                    )}\r\n                                </div>\r\n\r\n                                {/* Author and Date */}\r\n                                <p className=\"text-sm text-gray-500 mt-2\">\r\n                                    {notice.author} • {formatTime(notice.time)}\r\n                                </p>\r\n\r\n                                {/* Notice Description */}\r\n                                <p className=\"text-gray-700 mt-2\">{notice.description}</p>\r\n\r\n                                {/* Action Buttons */}\r\n                                <div className=\"flex justify-between items-center mt-4\">\r\n                                    <button\r\n                                        className=\"bg-gray-800 text-white px-3 py-1 rounded hover:bg-gray-700\"\r\n                                        onClick={() => markAsRead(notice.nId)}\r\n                                    >\r\n                                        Mark as Read\r\n                                    </button>\r\n                                    <button className=\"bg-blue-600 text-white px-3 py-1 rounded hover:bg-blue-500\">\r\n                                        Read More\r\n                                    </button>\r\n                                </div>\r\n                            </div>\r\n                        ))\r\n                    ) : (\r\n                        <p className=\"text-gray-500 col-span-3 text-center\">No notices available.</p>\r\n                    )}\r\n                </div>\r\n            </div>\r\n        </Layout>\r\n    );\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}