{"ast":null,"code":"import axios from \"axios\";\nimport { jwtDecode } from 'jwt-decode';\nconst apiURL = process.env.REACT_APP_API_URL;\nconst BearerToken = () => localStorage.getItem(\"jwt\") ? JSON.parse(localStorage.getItem(\"jwt\")).token : false;\n_c = BearerToken;\nconst Headers = () => {\n  return {\n    headers: {\n      token: `Bearer ${BearerToken()}`\n    }\n  };\n};\n_c2 = Headers;\nexport const BearerTokens = () => {\n  const token = localStorage.getItem(\"jwt\") ? JSON.parse(localStorage.getItem(\"jwt\")).token : false;\n  return token;\n};\n\n// Get the user ID from the decoded token\n_c3 = BearerTokens;\nexport const getUserIdFromToken = () => {\n  const token = BearerTokens();\n  console.log(\"this is token\", token);\n  if (token) {\n    try {\n      const decoded = jwtDecode(token); // Decode the JWT token\n      console.log(\"this is decoded\", decoded);\n      return decoded._id; // Replace 'userId' with the correct field name from your JWT payload\n    } catch (error) {\n      console.error(\"Error decoding token\", error);\n      return null;\n    }\n  }\n  return null;\n};\n\n// Get all notices\nexport const getAllNotices = async () => {\n  try {\n    let res = await axios.get(`${apiURL}/api/notice/all-notices`, Headers());\n    return res.data;\n  } catch (error) {\n    console.log(error);\n  }\n};\n\n// Create a new notice\nexport const createNotice = async ({\n  title,\n  content,\n  status\n}) => {\n  let data = {\n    title,\n    content,\n    status\n  };\n  try {\n    let res = await axios.post(`${apiURL}/api/notice/add-notice`, data, Headers());\n    return res.data;\n  } catch (error) {\n    console.log(error);\n  }\n};\n\n// Edit an existing notice\nexport const editNotice = async (nId, title, content, status) => {\n  let data = {\n    nId,\n    title,\n    content,\n    status\n  };\n  try {\n    let res = await axios.post(`${apiURL}/api/notice/edit-notice`, data, Headers());\n    return res.data;\n  } catch (error) {\n    console.log(error);\n  }\n};\n\n// Delete a notice\nexport const deleteNotice = async nId => {\n  try {\n    let res = await axios.post(`${apiURL}/api/notice/delete-notice`, {\n      nId\n    }, Headers());\n    return res.data;\n  } catch (error) {\n    console.log(error);\n  }\n};\nvar _c, _c2, _c3;\n$RefreshReg$(_c, \"BearerToken\");\n$RefreshReg$(_c2, \"Headers\");\n$RefreshReg$(_c3, \"BearerTokens\");","map":{"version":3,"names":["axios","jwtDecode","apiURL","process","env","REACT_APP_API_URL","BearerToken","localStorage","getItem","JSON","parse","token","_c","Headers","headers","_c2","BearerTokens","_c3","getUserIdFromToken","console","log","decoded","_id","error","getAllNotices","res","get","data","createNotice","title","content","status","post","editNotice","nId","deleteNotice","$RefreshReg$"],"sources":["C:/Users/ACER/Downloads/New folder (2)/MERN_Stack_Project_Ecommerce_Hayroo/client/src/components/admin/notices/fetchApi.js"],"sourcesContent":["import axios from \"axios\";\r\nimport { jwtDecode } from 'jwt-decode';\r\nconst apiURL = process.env.REACT_APP_API_URL;\r\n\r\nconst BearerToken = () =>\r\n    localStorage.getItem(\"jwt\")\r\n        ? JSON.parse(localStorage.getItem(\"jwt\")).token\r\n        : false;\r\n\r\nconst Headers = () => {\r\n    return {\r\n        headers: {\r\n            token: `Bearer ${BearerToken()}`,\r\n        },\r\n    };\r\n};\r\n\r\nexport const BearerTokens = () => {\r\n    const token = localStorage.getItem(\"jwt\")\r\n        ? JSON.parse(localStorage.getItem(\"jwt\")).token\r\n        : false;\r\n    return token;\r\n};\r\n\r\n// Get the user ID from the decoded token\r\nexport const getUserIdFromToken = () => {\r\n    const token = BearerTokens();\r\n    console.log(\"this is token\", token);\r\n    if (token) {\r\n        try {\r\n            const decoded = jwtDecode(token); // Decode the JWT token\r\n            console.log(\"this is decoded\", decoded);\r\n            return decoded._id; // Replace 'userId' with the correct field name from your JWT payload\r\n        } catch (error) {\r\n            console.error(\"Error decoding token\", error);\r\n            return null;\r\n        }\r\n    }\r\n    return null;\r\n};\r\n\r\n// Get all notices\r\nexport const getAllNotices = async () => {\r\n    try {\r\n        let res = await axios.get(`${apiURL}/api/notice/all-notices`, Headers());\r\n        return res.data;\r\n    } catch (error) {\r\n        console.log(error);\r\n    }\r\n};\r\n\r\n// Create a new notice\r\nexport const createNotice = async ({\r\n    title,\r\n    content,\r\n    status,\r\n}) => {\r\n    let data = { title, content, status };\r\n    try {\r\n        let res = await axios.post(\r\n            `${apiURL}/api/notice/add-notice`,\r\n            data,\r\n            Headers()\r\n        );\r\n        return res.data;\r\n    } catch (error) {\r\n        console.log(error);\r\n    }\r\n};\r\n\r\n// Edit an existing notice\r\nexport const editNotice = async (nId, title, content, status) => {\r\n    let data = { nId, title, content, status };\r\n    try {\r\n        let res = await axios.post(\r\n            `${apiURL}/api/notice/edit-notice`,\r\n            data,\r\n            Headers()\r\n        );\r\n        return res.data;\r\n    } catch (error) {\r\n        console.log(error);\r\n    }\r\n};\r\n\r\n// Delete a notice\r\nexport const deleteNotice = async (nId) => {\r\n    try {\r\n        let res = await axios.post(\r\n            `${apiURL}/api/notice/delete-notice`,\r\n            { nId },\r\n            Headers()\r\n        );\r\n        return res.data;\r\n    } catch (error) {\r\n        console.log(error);\r\n    }\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}